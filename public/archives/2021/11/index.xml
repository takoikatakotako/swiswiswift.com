<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021/11 on すいすいSwift</title>
    <link>https://swiswiswift.com/archives/2021/11/</link>
    <description>Recent content in 2021/11 on すいすいSwift</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language><atom:link href="https://swiswiswift.com/archives/2021/11/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RustでVecやArrayをシリアライズしたりデシリアライズする</title>
      <link>https://swiswiswift.com/2021-11-16/</link>
      <pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-16/</guid>
      <description>RustでVecやArrayをシリアライズしたりデシリアライズする方法です。 VecでもArrayでも</description>
    </item>
    
    <item>
      <title>RustでJSONを読み込んでstructにデシリアライズする</title>
      <link>https://swiswiswift.com/2021-11-15/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-15/</guid>
      <description>RustでJSONを読み込んでstructにデシリアライズする方法です。 ローカルのJSONを読み込ん</description>
    </item>
    
    <item>
      <title>RustでstructをJSONにシリアライズしたりデシリアライズする</title>
      <link>https://swiswiswift.com/2021-11-14/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-14/</guid>
      <description>RustでstructをJSONにシリアライズしたりデシリアライズする方法です。 参考 amzn_assoc_ad_type =&#34;responsive_search_widget&#34;; amzn_assoc_tracking_id =&#34;swiswiswift-22&#34;; amzn_assoc_marketplace =&#34;amazon&#34;; amzn_assoc_region =&#34;JP&#34;;</description>
    </item>
    
    <item>
      <title>SpringBootでログをファイルに出力する</title>
      <link>https://swiswiswift.com/2021-11-13/</link>
      <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-13/</guid>
      <description>SpringBootでログをファイルに出力する方法です。 application.properties に logging.file.name=spring.log を追加するとログがファイルとしても出力</description>
    </item>
    
    <item>
      <title>SwiftでMapViewの中央に十字を用意し、その中央の座標を取得する</title>
      <link>https://swiswiswift.com/2021-11-12/</link>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-12/</guid>
      <description>SwiftでMapViewの中央に十字を用意し、その中央の座標を取得する方法です。 スクロールしたりピ</description>
    </item>
    
    <item>
      <title>Rustでコマンドライン引数を渡す</title>
      <link>https://swiswiswift.com/2021-11-11/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-11/</guid>
      <description>Rustでコマンドライン引数を渡す方法です。 use std::env; fn main() { let args: Vec&amp;lt;String&amp;gt; = env::args().collect(); println!(&amp;#34;{:?}&amp;#34;, args); } rustc main.rs ./main snorlax 143 [&amp;quot;./main&amp;quot;, &amp;quot;snorlax&amp;quot;, &amp;quot;143&amp;quot;]</description>
    </item>
    
    <item>
      <title>RustでHelloWorldをする</title>
      <link>https://swiswiswift.com/2021-11-10/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-10/</guid>
      <description>RustでHelloWorldをする方法です。 main.rs というファイルを作成します。 fn main() { println!(&amp;#34;Hello, World&amp;#34;); } 以下のコマン</description>
    </item>
    
    <item>
      <title>SwiftUIでPHPickerViewControllerを使って画像を選択する</title>
      <link>https://swiswiswift.com/2021-11-09/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-09/</guid>
      <description>SwiftUIでPHPickerViewControllerを使って画像を選択する方法です。 Imag</description>
    </item>
    
    <item>
      <title>SwiftでJSONエンコードするときに数字の桁数を指定する</title>
      <link>https://swiswiswift.com/2021-11-08/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-08/</guid>
      <description>SwiftでJSONデコードするときに数字の桁数を指定する方法です。 文字列になってしまいましたが、以</description>
    </item>
    
    <item>
      <title>Swiftの細かい文法のメモ</title>
      <link>https://swiswiswift.com/2021-11-07/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-07/</guid>
      <description>関数の引数は呼び出し側で省略したり、別名をつけたりすることができる。 func buyA(product: Int, price: Int, quantity: Int) { print(product, price, quantity) } buyA(product: 1200, price: 1500,</description>
    </item>
    
    <item>
      <title>Swiftで引数を参照渡しをする</title>
      <link>https://swiswiswift.com/2021-11-06/</link>
      <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-06/</guid>
      <description>Swiftで引数を参照渡しをする方法です。 まず普通に書いた場合です。 プログラム実行後 x = 2, y = 4 とな</description>
    </item>
    
    <item>
      <title>PHPickerViewControllerを使って画像を選択する</title>
      <link>https://swiswiswift.com/2021-11-05/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-05/</guid>
      <description>PHPickerViewController を使って画像を選択する方法です。 UIImagePickerController が将来的に非推奨になり PHPickerViewController に置き換わっていくみたいです。 参考: Meet the</description>
    </item>
    
    <item>
      <title>UIKitのScrollViewでページングを実装する</title>
      <link>https://swiswiswift.com/2021-11-04/</link>
      <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-04/</guid>
      <description>UIKitのScrollViewでページングを実装する方法です。 スクロールすると切り替わるタイミング</description>
    </item>
    
    <item>
      <title>SpringBootでマークダウンをHTMLに変換してThymeleafで表示する</title>
      <link>https://swiswiswift.com/2021-11-03/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-03/</guid>
      <description>SpringBootでマークダウンをHTMLに変換してThymeleafで表示する方法です。 マークダ</description>
    </item>
    
    <item>
      <title>SwiftUIでスライダーとスクロールを連動させる</title>
      <link>https://swiswiswift.com/2021-11-02/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-02/</guid>
      <description>SwiftUIでスライダーとスクロールを連動させる方法です。 スライダーの値を変えることでScroll</description>
    </item>
    
    <item>
      <title>SwiftUIでカメラを使う</title>
      <link>https://swiswiswift.com/2021-11-01/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2021-11-01/</guid>
      <description>SwiftUIでカメラを使う方法です。 録画を可能にする CameraView を作成しそれを SwiftUI 側で呼び出すようにします。 S</description>
    </item>
    
  </channel>
</rss>
